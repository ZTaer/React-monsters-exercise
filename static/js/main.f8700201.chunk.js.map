{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","monsterImg","monster","id","className","src","alt","name","email","CardList","monsters","map","cur","key","SearchBox","placeholder","searchChangeEvent","type","onChange","App","e","setState","searchField","target","value","state","a","axios","users","console","log","getMonsters","then","data","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,uQCG9BC,G,YAAO,SAAAC,GAEhB,IAAMC,EAAU,+BAA2BD,EAAME,QAAQC,GAAzC,sBAChB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKJ,EAAYK,IAAI,YAC1B,4BACKN,EAAME,QAAQK,MAEnB,2BACKP,EAAME,QAAQM,UCTlBC,EAAW,SAAAT,GACpB,OACI,yBAAKI,UAAU,aAEPJ,EAAMU,SAASC,KAAK,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAIT,GAAID,QAASU,SCL1DE,G,MAAY,SAAC,GAA0C,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,kBACtC,OACI,2BAAOZ,UAAU,SAASa,KAAK,SAASF,YAAcA,EAAcG,SAAWF,MC+LxEG,E,YA1Lb,aAAc,IAAD,8BACZ,+CAkEDH,kBAAoB,SAAAI,GAClB,EAAKC,SAAU,CAAEC,YAAaF,EAAEG,OAAOC,SAlEvC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAJJ,E,iFAUO,IAAD,mDAGjB,4BAAAI,EAAA,+EAEwBC,IAAM,8CAF9B,cAEUC,EAFV,yBAGWA,GAHX,gCAKMC,QAAQC,IAAR,MALN,0DAHiB,kEAWjBC,GAAcC,MAAM,SAAApB,GAClB,EAAKS,SAAU,CAAEX,SAAUE,EAAIqB,Y,+BAiD3B,MAe4BC,KAAKT,MAA/Bf,EAfF,EAeEA,SAAUY,EAfZ,EAeYA,YACZa,EAAiBzB,EAAS0B,QAAQ,SAAAxB,GAAG,OAAIA,EAAIL,KAAK8B,cAAcC,SAAUhB,EAAYe,kBAE5F,OAYE,yBAAKjC,UAAU,OACb,gEACA,kBAAC,EAAD,CAAWW,YAAY,wFAAkBC,kBAAoBkB,KAAKlB,oBAClE,kBAAC,EAAD,CAAUN,SAAUyB,S,GAzGVI,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.f8700201.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => {\r\n    // 索引怪物图片API( 完成笔记 )\r\n    const monsterImg = `https://robohash.org/${props.monster.id}?set=set2&=180x180`;\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={monsterImg} alt=\"monster\"/>\r\n            <h2>\r\n                {props.monster.name}\r\n            </h2>\r\n            <p>\r\n                {props.monster.email}\r\n            </p>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\" >\r\n            {\r\n                props.monsters.map( cur => <Card key={cur.id} monster={cur} /> )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n// 自定义标签属性传输,以及重用性( 完成笔记 )\r\n    /**\r\n    引入方:\r\n        import { CardList } from '...';\r\n        <Cardlist xxx=\"zhao\" >\r\n            <h1> __oo7__ </h1>\r\n        </Cardlist>\r\n        <Cardlist name=\"zhao\" /> // 可以多次重用,像函数一样不受其它影响 \r\n    输出方:\r\n        a) props.children: 是自定义标签中的JSX内容\r\n        b) props.xxx: 为自定义标签中的属性内容 \r\n        c) props为对象类型, 存储着自定义标签的参数 \r\n        d) 注意: 必须要引入react库: import 'React' from 'react';\r\n     \r\nexport const CardList = props => {\r\n    console.log( props );\r\n    return (\r\n        <div>\r\n            { props.children } \r\n            <h1> { props.name } </h1>\r\n        </div>\r\n    );\r\n};\r\n*/\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ( { placeholder, searchChangeEvent } ) => {\r\n    return (\r\n        <input className='search' type='search' placeholder={ placeholder } onChange={ searchChangeEvent }  />\r\n    );\r\n}","// import 可以多类型导入\nimport React,{ Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends Component{\n  constructor(){\n   super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n  }\n\n  // react-关于componentDidMount()此函数是在，componet中render()完只后执行的内容。( 完成笔记 )\n    // 0. 经常用于请求数据,改变this.state数据,以至于react又要调用render()渲染界面。\n  componentDidMount(){\n\n    // async异步套装请求怪物数据\n    async function getMonsters(){\n      try{\n        const users = await axios('https://jsonplaceholder.typicode.com/users');\n        return users;\n      }catch( error ){\n          console.log( error )\n      }\n    }\n    getMonsters().then( cur => {\n      this.setState( { monsters: cur.data } );\n    } );\n\n  }\n\n  /**\n   * react-class方法传递,class类中可以使用'箭头函数'\n   */\n  // 0. 原因: 在react中如果将class函数传递给其它作用域，普通class函数因无this会报错必须借用this.xxx.bind(this);才能正常传递使用\n  // 1. 作用: class中如果使用箭头函数，直接可以传递使用this.xxx;\n  // 2. 解析: 因为'箭头函数'可以继承父类的所有方法属性.因为他们同属于一个作用域\n  // 3. 实战:\n    /**\n     * import React,{Component} from 'react';\n     * \n     * class App() extends Component{\n     *    constructor(){\n     *      super();\n     *      this.state = {\n     *        xx: '',     \n     *      };\n     *      \n     *      this.tt.bind( this ); // 普通方法, 有他才能正常传递使用\n     *    }\n     *    \n     *    // 普通方法\n     *    tt(){\n     *      this.setState({ xx: 'xxx' });   \n     *    }\n     *    \n     *    // 箭头函数方法\n     *    bb = ()=>{\n     *      this.setState({ xx: 'xxx' });   \n     *    }\n     * \n     *    render(\n     *      <DivCard1 onChangeEvent={ this.tt } /> // 普通方法, 需bind()配合\n     *      <DivCard2 onChangeEvent={ this.bb } /> // 箭头函数方法, 直接调用\n     *    );\n     * }\n     */\n\n    // b) 箭头函数class类实战\n\n\n  searchChangeEvent = e => {\n    this.setState( { searchField: e.target.value } );\n  }\n  \n  render(){\n    // map()函数渲染JSX方法使用( 用于循环数组, 只不过在这里是的内容是JSX )( 完成笔记 )\n        // 0. 使用map函数的优势:\n          // a) react非常的聪明, 如果map循环的数据中有变化, 那么他只会渲染发生变化的内容, 不会全部重新渲染\n          // b) 这样的方法大大提高了效率 \n        // 1. JSX中map函数使用注意事项: \n          // a) JSX中大括号中才能写JS语法: { JS语法 }\n          // b) key属性，非常重要react用于标识不同的标签, \n            // 0. 有map()的地方一定要有key配合\n            // 1. key一般存储id, 放置于JSX标签属性\n          // c) 如果有cur => { return xxx; }别忘记return, map()才能重组数组;\n        // 2. map()无return写法 \n          // { this.state.monsters.map( cur => <h1 key={ cur.id } > { cur.name } </h1> ) }\n        // 3. map()有return写法, 如下:\n\n    const { monsters, searchField } = this.state; // 对象解构\n    const filterMonsters = monsters.filter( cur => cur.name.toLowerCase().includes( searchField.toLowerCase() ) ); // 过滤数组元素,小写字符串方便比较 \n\n    return(\n          /***this.setState异步与回调函数( 等待笔记 )\n           * 0. this.setState( { 改变值 }, 改变后执行的函数 ) -> this.setState( { xxx: xxx }, ()=>{} );\n           * 1. 因为this.setState( {}, function )为异步运行的，所以要在同setState下的，另写一个function确定修改值的准确性。异步可以保证其它js正常运行，可以直接应用到异步需求的搜索栏\n           * \n            this.setState( { searchField: e.target.value }, ()=>{console.log(this.state)} )\n           */\n          /***JSX属性onChange={}表单内容发生改变触发函数( 等待笔记 )\n           * 0. onChange = { e => {} }\n           * 1. e: 包含表单标签的属性，常用e.target.value获取表单输入值 \n           * 2. 如: <input type='search' onChange={ e => { 注意: 改变this.state值会重新执行render函数 } } /> \n           */ \n      <div className=\"App\">\n        <h1> 大怪物用户 </h1>\n        <SearchBox placeholder='搜索怪物名称-测试实时搜索功能' searchChangeEvent={ this.searchChangeEvent } />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n\n}\n\n/* 1. 测试Componet/render( return(JSX) )/onClick/this.setState({})\nclass App extends Component {\n  constructor(){\n    // 继承蓝图属性\n    super();\n\n    this.state = {\n      string: '这是一个测试',\n    };\n    this.test = {\n      name: 'ztaer',\n    };\n\n  }\n\n  // render()渲染JSX到前端( 完成笔记 )\n  // 0. 函数本身为Component类中的函数, 经过蓝图继承, 可直接调用蓝图函数.\n  // 1. 使用方法: \n    // a) 前提条件是在Component类下\n    // b) render(){ return( JSX内容 ) };\n  render(){\n    return(\n\n      // JSX是React模仿HTML的内容( 完成笔记 )\n        // 0. JSX大致于HTML相似，只不过更加方便改变参数在JS中\n        // 1. 注意className == class: 目的是为了区分JS的class\n        // 2. JSX中大括号内才可以写JS语法: 如src={ logo }\n        // 3. JSX对应的css导入: import 'xx.css';注意JSX,className对应html的class名称\n      // JSX-关于onClick={ function }用法( 完成笔记 )\n        // 0. 在JSX中添加此方法后，当用户单击时，将重新执行render()函数，也就是前端界面将重新渲染\n        // 1. 经常使用此方法来改变某个变量参数, 来反应到前端\n        // 如: onClick={ ()=>{ this.setState({ string: 'change this' }) } }\n      // this.setState({ string: 'test' }); == this.state.string = 'test';( 完成笔记 )\n        // 0. 此方法能轻松的改变对象属性参数\n        // 1. 注意: 只能使用在this.state对象中, 其它名称对象不行\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            { this.state.string }\n          </p>\n          <button onClick={ () => { this.setState({ string: '测试onClick函数，以及this.setState({})直接访问对象属性的写法' }) } } >\n            Click Change Text\n          </button>\n        \n        </header>\n      </div>\n    );\n\n  }\n\n}\n*/\n\n/* 0. 原始内容\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          { this.state.string }\n        </p>\n        <button onClick={ () => { this.setState({ string: '测试onClick函数，以及this.setState({})直接访问对象属性的写法' }) } } >\n          Click Change Text\n        </button>\n      \n      </header>\n    </div>\n  );\n}\n*/\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render()指定ID标签,渲染JSX内容到前端( 完成笔记 )\n    // 0. <App />: 自定义标签\n    // 1. 使用方法: ReactDOM.render( <自定义标签 />, 渲染位置  );\nReactDOM.render(<App />, document.getElementById('root'));\n\n// 自定义标签( 完成笔记 )\n    // 0. 因为class开头大写, 自定义标签名称与class名相同\n    // 1. 可以使用自定义标签的情况:\n        // a) 类情况: class Xxx extends Component{ render( return( JSX ) ); }\n        // b) 函数情况: \n            // 0. const Xxx ()=>( JSX ): 小括号其实具有欺骗,编译器的效果,使编译器直接执行/返回小括号内容\n            // 1. const Xxx ()=>{ return (JSX) }\n            // 2. function Xxx(){ return (JSX) }\n    // 3. <Xxx/>自定义标签转换过程 \n        // a) 自定义标签( JSX -> 自定义标签 -> HTML ): \n    // 4. 关于JSX名称要开头大写\n\n// 合理的文件结构( 完成笔记 )\n    // 0. webpack最终将会把他们打包一起\n    // 0. 关于JSX文件结构化:\n        // a) 类名.文件夹.jsx\n        // b) 示例:\n            /** components文件夹:\n             *  --card文件夹\n             *  ----card.components.jsx\n             *  ----card.style.css\n             *  \n             *  --search-box文件夹\n             *  ----search.components.jsx\n             *  ----search.style.css \n             */\n            \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}